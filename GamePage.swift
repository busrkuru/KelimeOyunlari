import SwiftUI
import FirebaseAuth
import FirebaseFirestore

struct GamePage: View {
    @State private var username = ""
    @State private var successRate: Double = 0.0
    @State private var totalGames = 0
    @State private var wonGames = 0
    @State private var selectedGameTime: String = ""
    
    @StateObject private var firestoreService = FirestoreService()
    @State private var isMatched = false
    
    @State private var checkMatchTimer: Timer? = nil
    @State private var currentUserId: String = ""
    
    
    @State private var matchedGameId: String?
    

    var body: some View {
        TabView {
            VStack {
                Text("Kullanƒ±cƒ± Adƒ±: \(username)")
                    .font(.title)
                    .padding()

                Text("Ba≈üarƒ± Y√ºzdesi: \(Int(successRate * 100))%")
                    .padding()

                Text("Yeni Oyun Se√ßiniz:")
                    .font(.title2)
                    .padding()

                Button("Hƒ±zlƒ± Oyun (2 dakika)") {
                    selectedGameTime = "Hƒ±zlƒ± Oyun (2 dakika)"
                    startNewGame(time: 2 * 60)
                }
                .padding()
                .background(Color.blue)
                .foregroundColor(.white)
                .cornerRadius(10)

                Button("Hƒ±zlƒ± Oyun (5 dakika)") {
                    selectedGameTime = "Hƒ±zlƒ± Oyun (5 dakika)"
                    startNewGame(time: 5 * 60)
                }
                .padding()
                .background(Color.blue)
                .foregroundColor(.white)
                .cornerRadius(10)

                Button("Geni≈ületilmi≈ü Oyun (12 saat)") {
                    selectedGameTime = "Geni≈ületilmi≈ü Oyun (12 saat)"
                    startNewGame(time: 12 * 60 * 60)
                }
                .padding()
                .background(Color.blue)
                .foregroundColor(.white)
                .cornerRadius(10)

                Button("Geni≈ületilmi≈ü Oyun (24 saat)") {
                    selectedGameTime = "Geni≈ületilmi≈ü Oyun (24 saat)"
                    startNewGame(time: 24 * 60 * 60)
                }
                .padding()
                .background(Color.blue)
                .foregroundColor(.white)
                .cornerRadius(10)

                Spacer()
            }
            .tabItem {
                Label("Yeni Oyun", systemImage: "gamecontroller")
            }

            ActiveGamesView() // üîÅ Oyunu burada se√ßecek
                .tabItem {
                    Label("Aktif Oyunlar", systemImage: "gamecontroller")
                }

            FinishedGamesView()
                .tabItem {
                    Label("Biten Oyunlar", systemImage: "checkmark.circle")
                }
        }
        .onAppear {
            fetchUserData()
        }
    }

    func fetchUserData() {
        guard let user = Auth.auth().currentUser else { return }
        let db = Firestore.firestore()
        let userRef = db.collection("users").document(user.uid)

        userRef.getDocument { (document, error) in
            if let document = document, document.exists {
                let data = document.data()
                username = data?["username"] as? String ?? "Bilinmiyor"
                totalGames = data?["totalGames"] as? Int ?? 0
                wonGames = data?["wonGames"] as? Int ?? 0

                if totalGames > 0 {
                    successRate = Double(wonGames) / Double(totalGames)
                }
            } else {
                print("User data not found")
            }
        }
    }

    
    func startNewGame(time: Int) {
        guard let user = Auth.auth().currentUser else { return }

        let db = Firestore.firestore()
        let username = user.displayName ?? "Player"

        let gameQueueData: [String: Any] = [
            "gameTime": time,
            "userID": user.uid,
            "username": username,
            "status": "waiting",
            "timestamp": FieldValue.serverTimestamp()
        ]

        db.collection("gamesQueue").addDocument(data: gameQueueData) { error in
            if let error = error {
                print("‚ùå Kuyruƒüa ekleme hatasƒ±: \(error.localizedDescription)")
            } else {
                print("‚úÖ Kuyruƒüa eklendi. E≈üle≈üme kontrol√º ba≈ülatƒ±lƒ±yor...")

                DispatchQueue.main.asyncAfter(deadline: .now() + 2.0) {
                    firestoreService.checkIfUserHasMatchedGame(uid: user.uid) { result in
                        switch result {
                        case .success(let gameId):
                            print("üéØ E≈üle≈üme bulundu: \(gameId)")
                            self.matchedGameId = gameId
                            self.isMatched = true

                            // ‚úÖ Mayƒ±nlarƒ± olu≈ütur ve Firestore'a yaz
                            let mines = firestoreService.generateMineBoard()
                            db.collection("games").document(gameId).updateData([
                                "mines": mines
                            ]) { error in
                                if let error = error {
                                    print("‚ùå Mayƒ±nlar Firestore'a eklenemedi: \(error.localizedDescription)")
                                } else {
                                    print("‚úÖ Mayƒ±nlar Firestore'a ba≈üarƒ±yla eklendi.")
                                }
                            }

                            // ‚úÖ √ñd√ºlleri olu≈ütur ve Firestore'a yaz
                            let rewardMatrix = firestoreService.generateRewardMatrix()
                            let flatRewards = rewardMatrix.flatMap { $0 }
                            db.collection("games").document(gameId).updateData([
                                "rewards": flatRewards
                            ]) { error in
                                if let error = error {
                                    print("‚ùå √ñd√ºller Firestore'a eklenemedi: \(error.localizedDescription)")
                                } else {
                                    print("‚úÖ √ñd√ºller Firestore'a ba≈üarƒ±yla eklendi.")
                                }
                            }

                            // ‚úÖ Ba≈ülangƒ±√ß harf havuzunu olu≈ütur ve Firestore'a yaz
                            let initialPool = firestoreService.createInitialLetterPool()
                            db.collection("games").document(gameId).updateData([
                                "remainingPool": initialPool
                            ]) { error in
                                if let error = error {
                                    print("‚ùå Harf havuzu Firestore'a eklenemedi: \(error.localizedDescription)")
                                } else {
                                    print("‚úÖ Harf havuzu ba≈üarƒ±yla Firestore'a eklendi.")
                                }
                            }

                        case .failure(let error):
                            print("‚ö†Ô∏è E≈üle≈üme yok: \(error.localizedDescription)")
                        }
                    }
                }
            }
        }
    }
    func startMatchCheckingLoop() {
        checkMatchTimer?.invalidate() // varsa eski timerƒ± iptal et
        checkMatchTimer = Timer.scheduledTimer(withTimeInterval: 3.0, repeats: true) { _ in
            firestoreService.fetchActiveGame(for: currentUserId) { success in
                if success {
                    isMatched = true
                    checkMatchTimer?.invalidate() // e≈üle≈ütiyse timer durdur
                }
            }
        }
    }

    func addPlayerToQueue(gameTime: Int) {
        guard let user = Auth.auth().currentUser else { return }
        
        let db = Firestore.firestore()
        let username = user.displayName ?? "Player"  // email yerine displayName kullanƒ±lacak

        let gameQueueData: [String: Any] = [
            "gameTime": gameTime,
            "userID": user.uid,
            "username": username,
            "status": "waiting",
            "timestamp": FieldValue.serverTimestamp() // sunucu zamanƒ± eklendi
        ]

        db.collection("gamesQueue").addDocument(data: gameQueueData) { error in
            if let error = error {
                print("Oyuncu kuyruƒüa eklenemedi: \(error.localizedDescription)")
            } else {
                print("Oyuncu kuyruƒüa ba≈üarƒ±yla eklendi.")
            }
        }
    }

    
}

struct GamePage_Previews: PreviewProvider {
    static var previews: some View {
        GamePage()
    }
}
